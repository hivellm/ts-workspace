/**
 * BIP System Types
 * Core type definitions for the BIP voting system
 */

export interface BIPProposal {
  number: string;
  title: string;
  author: string;
  type: BIPType;
  category: BIPCategory;
  status: BIPStatus;
  created: Date;
  sourceProposal?: string; // e.g., "P012"
  sourceMinute?: string;   // e.g., "0001"
  abstract: string;
  motivation: string;
  specification: string;
  rationale: string;
  implementation?: string;
  backwardCompatibility?: string;
  securityConsiderations?: string;
  references?: string[];
  changelog: BIPChangelogEntry[];
  assignedModels?: string[];
  milestones: BIPMilestone[];
}

export type BIPType = 'Standards Track' | 'Informational' | 'Process';
export type BIPCategory = 'Core' | 'Networking' | 'API' | 'Applications';
export type BIPStatus = 'Draft' | 'Review' | 'Approved' | 'Implementation' | 'Testing' | 'Deployed' | 'Rejected';

export interface BIPMilestone {
  phase: BIPPhase;
  completed: boolean;
  completedBy?: string;
  completedAt?: Date;
  description?: string;
}

export type BIPPhase = 'Draft' | 'Review' | 'Implementation' | 'Testing' | 'Deployment';

export interface ImplementationTrackingBlock {
  index: number;
  timestamp: Date;
  previousHash: string | null;
  type: TrackingBlockType;
  model: string;
  action: string;
  files: string[];
  fileHash: string;
  hash: string;
}

export type TrackingBlockType = 'draft' | 'review' | 'implementation' | 'testing' | 'deployment';

export interface BIPProgressReport {
  bipId: string;
  reportDate: Date;
  reporter: string;
  phase: BIPPhase;
  progressPercentage: number;
  completedTasks: string[];
  pendingTasks: string[];
  blockers: string[];
  nextMilestone: string;
}

export interface BIPChangelogEntry {
  date: Date;
  author: string;
  description: string;
}

export interface VotingSession {
  minuteId: string;
  proposals: string[]; // BIP numbers
  startTime: Date;
  endTime: Date;
  status: VotingStatus;
  quorumThreshold: number;
  approvalThreshold: number;
  chain: VotingBlock[];
  participants: string[]; // model IDs
}

export type VotingStatus = 'Draft' | 'Active' | 'Completed' | 'Cancelled';

export interface VotingBlock {
  index: number;
  timestamp: Date;
  previousHash: string | null;
  type: BlockType;
  model: string;
  data: VoteData | ResultData;
  hash: string;
}

export type BlockType = 'vote' | 'finalize';

export interface VoteData {
  voteFile: string;
  voteFileHash: string;
  votes: ProposalVote[];
}

export interface ResultData {
  resultFile: string;
  resultFileHash: string;
  results: ProposalResult[];
  autoGenerated: boolean;
}

export interface ProposalVote {
  proposalId: string;
  weight: number;
  justification?: string;
}

export interface ProposalResult {
  proposalId: string;
  totalScore: number;
  participantCount: number;
  status: 'Approved' | 'Rejected';
  voteBreakdown: VoteBreakdown;
}

export interface VoteBreakdown {
  approve: number;
  reject: number;
  abstain: number;
  averageWeight: number;
}

export interface ModelProfile {
  id: string;
  name: string;
  provider: string;
  category: 'General' | 'Collaboration';
  weight: number;
  isActive: boolean;
  lastActivity?: Date;
}

export interface NotificationEvent {
  id: string;
  type: NotificationType;
  minuteId: string;
  timestamp: Date;
  message: string;
  recipients: string[];
  delivered: boolean;
  metadata?: Record<string, unknown>;
}

export type NotificationType = 'vote-start' | 'vote-reminder' | 'vote-received' | 'vote-complete' | 'vote-finalized';

export interface VotingAnalytics {
  minuteId: string;
  generatedAt: Date;
  summary: VotingSummary;
  participationMetrics: ParticipationMetrics;
  proposalMetrics: ProposalMetrics[];
  timelineEvents: TimelineEvent[];
}

export interface VotingSummary {
  totalProposals: number;
  totalParticipants: number;
  participationRate: number;
  averageVotingTime: number; // minutes
  status: VotingStatus;
}

export interface ParticipationMetrics {
  expectedVoters: number;
  actualVoters: number;
  onTimeVoters: number;
  lateVoters: number;
  nonVoters: string[];
}

export interface ProposalMetrics {
  proposalId: string;
  title: string;
  author: string;
  finalScore: number;
  status: 'Approved' | 'Rejected';
  consensusLevel: number; // 0-1, how unified the vote was
  controversyScore: number; // variance in votes
}

export interface TimelineEvent {
  timestamp: Date;
  type: 'session-start' | 'vote-received' | 'reminder-sent' | 'session-finalized';
  model?: string;
  description: string;
}

export interface BIPSystemConfig {
  minutesDirectory: string;
  modelsConfigPath: string;
  quorumThreshold: number;
  approvalThreshold: number;
  votingPeriodHours: number;
  reminderIntervals: number[]; // hours before deadline
  autoFinalizeEnabled: boolean;
}
